/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package program;
import entity.CheckinLocation;
import entity.CheckinLocationDAO;
import entity.Passenger;
import entity.PassengerDAO;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Optional;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
/**
 *
 * @author desai
 */
public class Main extends javax.swing.JFrame {
    private CheckinLocationDAO checkinLocationDAO;
    private PassengerDAO passengerDAO;
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        checkinLocationDAO = new CheckinLocationDAO();
        passengerDAO = new PassengerDAO();
        refreshCheckInTable();
        refreshPassengerTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
//check in:
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LocationId = new javax.swing.JTextField();
        StationName = new javax.swing.JTextField();
        Create = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CheckInTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        PassengerID = new javax.swing.JTextField();
        FirstName = new javax.swing.JTextField();
        LastName = new javax.swing.JTextField();
        CheckinID = new javax.swing.JTextField();
        checkINTime = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        passengerTable = new javax.swing.JTable();
        deletePassenger = new javax.swing.JButton();
        updatePassenger = new javax.swing.JButton();
        CreatePassenger = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Location ID");

        jLabel2.setText("Station Name");

        LocationId.setText("Enter ID:");
        LocationId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocationIdActionPerformed(evt);
            }
        });

        StationName.setText("Station Name: ");
        StationName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StationNameActionPerformed(evt);
            }
        });

        Create.setText("CREATE");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });

        Delete.setText("DELETE");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Update.setText("UPDATE");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        CheckInTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Location ID", "Station Name"
            }
        ));
        jScrollPane1.setViewportView(CheckInTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Create)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Update)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Delete))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocationId, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LocationId, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StationName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Create)
                    .addComponent(Update)
                    .addComponent(Delete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Check-In Locations", jPanel1);

        jLabel3.setText("Passenger ID");

        jLabel4.setText("First Name");

        jLabel5.setText("Check-in Location ID");

        jLabel6.setText("Last Name");

        jLabel7.setText("Check-in Date-Time");

        PassengerID.setText("Enter ID:");
        PassengerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PassengerIDActionPerformed(evt);
            }
        });

        FirstName.setText("Enter First Name: ");
        FirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameActionPerformed(evt);
            }
        });

        LastName.setText("Enter Last Name: ");
        LastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastNameActionPerformed(evt);
            }
        });

        CheckinID.setText("Enter Check-in Location ID");
        CheckinID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckinIDActionPerformed(evt);
            }
        });

        checkINTime.setText("Enter Check-in Date-Time:");
        checkINTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkINTimeActionPerformed(evt);
            }
        });

        passengerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Passenger ID ", "First Name", "Last Name ", "Check-in Location", "Check-in Date "
            }
        ));
        jScrollPane2.setViewportView(passengerTable);

        deletePassenger.setText("DELETE");
        deletePassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePassengerActionPerformed(evt);
            }
        });

        updatePassenger.setText("UPDATE");
        updatePassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePassengerActionPerformed(evt);
            }
        });

        CreatePassenger.setText("CREATE");
        CreatePassenger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreatePassengerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(54, 54, 54))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PassengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckinID, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkINTime, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(CreatePassenger)
                        .addGap(18, 18, 18)
                        .addComponent(updatePassenger)
                        .addGap(18, 18, 18)
                        .addComponent(deletePassenger)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PassengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastName, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckinID, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkINTime, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletePassenger)
                    .addComponent(updatePassenger)
                    .addComponent(CreatePassenger))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Passenger", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//refresh 
private void refreshCheckInTable() {
        // Refresh the JTable with the latest locations from the database
        List<CheckinLocation> locations = checkinLocationDAO.getAll(); 
        DefaultTableModel model = (DefaultTableModel) CheckInTable.getModel(); 
        model.setRowCount(0);// Clear existing rows
        for (CheckinLocation location : locations) {
            Object[] row = new Object[2];  
            row[0] = location.getCheckInLocationID(); 
            row[1] = location.getStationName();
            model.addRow(row);
        }
    }
//update
    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        String ID = LocationId.getText().trim();
        String stationName = StationName.getText().trim();
         // Ensure ID and Station Name are not empty
        if (ID.isEmpty() || stationName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID and Station Name cannot be empty", "Update Error", JOptionPane.ERROR_MESSAGE);
        }
        int id = Integer.parseInt(ID);
        Optional<CheckinLocation> locationOpt = checkinLocationDAO.get(id);
        if(locationOpt.isPresent()){
            //update
            checkinLocationDAO.update(new CheckinLocation(id, stationName));
        // Refresh the table to show the new location
            refreshCheckInTable();
            JOptionPane.showMessageDialog(this, "Location updated successfully!");
        } else {
            // If the location does not exist, show an error message
            JOptionPane.showMessageDialog(this, "Location with ID " + id + " does not exist.", "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateActionPerformed
// delete
    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
     String ID = LocationId.getText().trim();
        //check to see its empty
        if (ID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID cannot be empty", "Delete Error", JOptionPane.ERROR_MESSAGE);
        }
        int id = Integer.parseInt(ID);
        Optional<CheckinLocation> locationOpt = checkinLocationDAO.get(id);
        //delete
        if (locationOpt.isPresent()) {
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this location?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                checkinLocationDAO.delete(locationOpt.get());  // Call DAO to delete the location
                refreshCheckInTable(); // Refresh the table
                JOptionPane.showMessageDialog(this, "Location deleted successfully!");
            }
        } else {
            // If the location doesn't exist, show an error message
            JOptionPane.showMessageDialog(this, "Location with ID " + id + " does not exist.", "Delete Error", JOptionPane.ERROR_MESSAGE);
        }
             refreshCheckInTable();

    }//GEN-LAST:event_DeleteActionPerformed
//create
    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        String ID = LocationId.getText().trim();
        String stationName = StationName.getText().trim();
        // check to see its not empty 
        if(ID.isEmpty() || stationName.isEmpty()){
            JOptionPane.showMessageDialog(this, "ID and Station Name cannot be empty", "Insert Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int id = Integer.parseInt(ID);
        // Check if the ID already exists
        if (checkIfLocationExists(id)) {
        JOptionPane.showMessageDialog(this, "Check-in Location ID already exists! Cannot insert duplicate.", "Primary Key Violation", JOptionPane.ERROR_MESSAGE);
        return;
        }
        //refresh and insert
        CheckinLocation newLocation = new CheckinLocation(id, stationName);
        checkinLocationDAO.insert(newLocation);
        refreshCheckInTable();
        JOptionPane.showMessageDialog(this, "Location added successfully!");   
    }//GEN-LAST:event_CreateActionPerformed
// check to see if it exists
    private boolean checkIfLocationExists(int id) {
    Optional<CheckinLocation> existingLocation = checkinLocationDAO.get(id);
    return existingLocation.isPresent(); // Returns true if the location exists
}
//table selecting a row in the JTable
 private void tblLocationsMouseClicked(java.awt.event.MouseEvent evt) {
        int row = CheckInTable.getSelectedRow(); // Get the selected row
        if (row >= 0) {
            // Get the values from the table's selected row and fill the text fields
            int id = (int) CheckInTable.getValueAt(row, 0);
            String stationName = (String) CheckInTable.getValueAt(row, 1);
            
            LocationId.setText(String.valueOf(id));  // Set the ID text field
            StationName.setText(stationName);  // Set the station name text field
        }
    }
// stationName 
    private void StationNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StationNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StationNameActionPerformed
// id
    private void LocationIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocationIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LocationIdActionPerformed
  
//passenger:
//passenger refresh
private void refreshPassengerTable() {
        // Refresh the JTable with the latest locations from the database
        List<Passenger> allPassengers = passengerDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) passengerTable.getModel(); 
        model.setRowCount(0);// Clear existing rows
        for (Passenger passenger : allPassengers) {
            Object[] row = new Object[5];  
            row[0] = passenger.getPassengerID(); 
            row[1] = passenger.getFirstName();
            row[2] = passenger.getLastName();
            row[3] = passenger.getCheckInLocationID();
            row[4] = passenger.getCheckInDateTime();
            model.addRow(row);
        }
}
    private void checkINTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkINTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkINTimeActionPerformed

    private void CheckinIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckinIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckinIDActionPerformed

    private void LastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LastNameActionPerformed

    private void FirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FirstNameActionPerformed

    private void PassengerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PassengerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PassengerIDActionPerformed
//delete
    private void deletePassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePassengerActionPerformed
        String ID = PassengerID.getText().trim();
    // Check to see if the ID is empty
    if (ID.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Passenger ID cannot be empty", "Delete Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    int id = Integer.parseInt(ID);
    // Check if the Passenger ID exists (Primary Key Check)
    PassengerDAO passengerDAO = new PassengerDAO();
    Optional<Passenger> existingPassenger = passengerDAO.get(id);
    if (!existingPassenger.isPresent()) {
        JOptionPane.showMessageDialog(this, "Passenger ID not found! Cannot delete.", "Primary Key Violation", JOptionPane.ERROR_MESSAGE);
        return; // Exit if Passenger doesn't exist
    }
    passengerDAO.delete(existingPassenger.get());

    // Refresh the table and show success message
    refreshPassengerTable();
    JOptionPane.showMessageDialog(this, "Passenger deleted successfully!");
    }//GEN-LAST:event_deletePassengerActionPerformed
//update
    private void updatePassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePassengerActionPerformed
    String ID = PassengerID.getText().trim();
    String firstName = FirstName.getText().trim();
    String lastName = LastName.getText().trim();
    String checkinID = CheckinID.getText().trim();
    String checkInTimeStr = checkINTime.getText().trim();

if (ID.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || checkinID.isEmpty() || checkInTimeStr.isEmpty()) {
    JOptionPane.showMessageDialog(this, "You can't keep any field empty", "Update Error", JOptionPane.ERROR_MESSAGE);
    return;
}
int id = Integer.parseInt(ID);
int checkinIDs = Integer.parseInt(checkinID);
LocalDateTime checkInDateTime = null;
try {
    checkInDateTime = LocalDateTime.parse(checkInTimeStr.replace(" ", "T"));  // Convert to LocalDateTime
} catch (DateTimeParseException e) {
    JOptionPane.showMessageDialog(this, "Invalid date/time format. Please use 'YYYY-MM-DD HH:MM:SS'.", "Update Error", JOptionPane.ERROR_MESSAGE);
    return; // Don't proceed if there's an invalid date format
}

// Check if the Passenger ID exists in the database (Primary Key Check)
PassengerDAO passengerDAO = new PassengerDAO();
Optional<Passenger> existingPassenger = passengerDAO.get(id);
if (!existingPassenger.isPresent()) {
    JOptionPane.showMessageDialog(this, "Passenger ID not found! Cannot update.", "Primary Key Violation", JOptionPane.ERROR_MESSAGE);
    return; // Exit if Passenger doesn't exist
}

// Check if the CheckinLocationID exists in the CheckinLocation table (Foreign Key Check)
CheckinLocationDAO checkinLocationDAO = new CheckinLocationDAO();
Optional<CheckinLocation> checkinLocation = checkinLocationDAO.get(checkinIDs);
if (!checkinLocation.isPresent()) {
    JOptionPane.showMessageDialog(this, "Invalid Check-In Location ID! This location does not exist.", "Foreign Key Violation", JOptionPane.ERROR_MESSAGE);
    return; // Exit if the CheckInLocationID is invalid (foreign key violation)
}
Passenger updatedPassenger = new Passenger(id, firstName, lastName, checkinIDs, checkInDateTime);
passengerDAO.update(updatedPassenger);
refreshPassengerTable();
JOptionPane.showMessageDialog(this, "Passenger updated successfully!");

    }//GEN-LAST:event_updatePassengerActionPerformed
//create
    private void CreatePassengerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreatePassengerActionPerformed
        String ID = PassengerID.getText().trim();
        String firstName = FirstName.getText().trim();
        String lastName = LastName.getText().trim();
        String checkinID = CheckinID.getText().trim();
        String checkInTimeStr  = checkINTime.getText().trim();
        // check to see if anything is empty 
        if(ID.isEmpty() || firstName.isEmpty()|| lastName.isEmpty()|| checkinID.isEmpty()|| checkInTimeStr.isEmpty()){
            JOptionPane.showMessageDialog(this, "You can't keep any field empty", "Insert Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int id = Integer.parseInt(ID);
        int checkinIDs = Integer.parseInt(checkinID);
        // Convert checkInTimeStr (String) to Timestamp
LocalDateTime checkInDateTime = null;
try {
    // Assume the format of checkInTimeStr is "yyyy-MM-dd HH:mm:ss"
    checkInDateTime = LocalDateTime.parse(checkInTimeStr.replace(" ", "T")); // Adjust the format as necessary
} catch (DateTimeParseException e) {
    JOptionPane.showMessageDialog(this, "Invalid date/time format. Please use 'YYYY-MM-DD HH:MM:SS'.", "Insert Error", JOptionPane.ERROR_MESSAGE);
    return; // Don't proceed if there's an invalid date format
}
// Check if the CheckInLocationID exists in the CheckinLocation table
CheckinLocationDAO checkinLocationDAO = new CheckinLocationDAO();
Optional<CheckinLocation> checkinLocation = checkinLocationDAO.get(checkinIDs);
if (!checkinLocation.isPresent()) {
    JOptionPane.showMessageDialog(this, "Invalid Check-In Location ID! This location does not exist.", "Foreign Key Violation", JOptionPane.ERROR_MESSAGE);
    return; // Don't proceed if the CheckInLocationID is invalid
}
// Now create a new Passenger object
PassengerDAO passengerDAO = new PassengerDAO();
Passenger newPassenger = new Passenger(id, firstName, lastName, checkinIDs, checkInDateTime); // Pass Timestamp here
passengerDAO.insert(newPassenger);
        refreshPassengerTable();
        JOptionPane.showMessageDialog(this, "Passenger added successfully!");
    }//GEN-LAST:event_CreatePassengerActionPerformed
 private boolean checkIfPassenger(int id) {
    // Assuming you have a PassengerDAO object (passengerDAO)
    Optional<Passenger> existingPassenger = passengerDAO.get(id); // Check if passenger exists using the DAO
    return existingPassenger.isPresent(); // Return true if the passenger exists
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable CheckInTable;
    private javax.swing.JTextField CheckinID;
    private javax.swing.JButton Create;
    private javax.swing.JButton CreatePassenger;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField FirstName;
    private javax.swing.JTextField LastName;
    private javax.swing.JTextField LocationId;
    private javax.swing.JTextField PassengerID;
    private javax.swing.JTextField StationName;
    private javax.swing.JButton Update;
    private javax.swing.JTextField checkINTime;
    private javax.swing.JButton deletePassenger;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable passengerTable;
    private javax.swing.JButton updatePassenger;
    // End of variables declaration//GEN-END:variables

    private void alert(String id_cannot_be_empty, String insert_error) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
